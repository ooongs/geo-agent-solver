{
  "training_data": [
    {
      "query": "请画出直角三角形<POINTS>，AB=<LENGTH>，BC=<LENGTH>，AC=<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "直角三角形<POINTS>，AB=<LENGTH>，BC=<LENGTH>，AC=<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Segment: [0] Creates a segment between two points."
      ]
    },
    {
      "query": "请画出直角三角形<POINTS>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "Sphere: [0] Creates a sphere with center and radius."
      ]
    },
    {
      "query": "直角三角形<POINTS>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Intersect: [2] Yields an intersection point of two objects by using a numerical, iterative method with initial point."
      ]
    },
    {
      "query": "请画一个等边三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Plane: [1] Creates the plane containing the conic."
      ]
    },
    {
      "query": "一个等边三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α."
      ]
    },
    {
      "query": "请画一个等边三角形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Segment: [0] Creates a segment between two points.",
        "Plane: [0] Creates the plane containing the given polygon.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius."
      ]
    },
    {
      "query": "一个等边三角形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point.",
        "Segment: [1] Creates a segment with the given starting point and length, as well as the end point of the segment."
      ]
    },
    {
      "query": "请画一个底边为<LENGTH>，高为<LENGTH>的三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined."
      ]
    },
    {
      "query": "一个底边为<LENGTH>，高为<LENGTH>的三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge."
      ]
    },
    {
      "query": "请在坐标平面上画一个以(<X_COORD>,<Y_COORD>)为顶点的等腰三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ]
    },
    {
      "query": "请在坐标平面上画一个以(<X_COORD>,<Y_COORD>)为顶点的等腰三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "请画一个内角和为<ANGLE>°的三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment."
      ]
    },
    {
      "query": "一个内角和为<ANGLE>°的三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Plane: [1] Creates the plane containing the conic."
      ]
    },
    {
      "query": "请画一个正方形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Cube: [0] Creates a cube having as base the given square.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Pyramid: [0] Creates a pyramid defined by the given points."
      ]
    },
    {
      "query": "一个正方形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Cube: [0] Creates a cube having as base the given square.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Sector: [1] Yields a conic sector between two parameter values between 0 and 2π on the conic section and calculates its area."
      ]
    },
    {
      "query": "请画一个正方形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Segment: [0] Creates a segment between two points.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Plane: [0] Creates the plane containing the given polygon.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "一个正方形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle."
      ]
    },
    {
      "query": "请画一个边长为<LENGTH>的正方形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Cube: [0] Creates a cube having as base the given square.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points."
      ]
    },
    {
      "query": "一个边长为<LENGTH>的正方形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Intersect: [1] Yields the nth intersection point of two objects. Each object must be a line, conic, polynomial function or implicit curve.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "请画一个正五边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Plane: [5] Creates the plane through the given points.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Pyramid: [1] Creates a pyramid with the given polygon as base and the point as apex."
      ]
    },
    {
      "query": "一个正五边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Plane: [2] Creates the plane through the given point, parallel to the given plane.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge."
      ]
    },
    {
      "query": "请画一个正五边形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Plane: [5] Creates the plane through the given points.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined."
      ]
    },
    {
      "query": "一个正五边形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Plane: [5] Creates the plane through the given points.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given line as axis and radius.",
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length."
      ]
    },
    {
      "query": "请画一个正六边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Vector: [1] Creates a vector from Start Point to End Point."
      ]
    },
    {
      "query": "一个正六边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given point on axis, axis of symmetry parallel to the given vector and radius.",
        "Plane: [4] Creates the plane through the lines (that must be intersecting or parallel to each other)."
      ]
    },
    {
      "query": "请画一个正六边形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment."
      ]
    },
    {
      "query": "一个正六边形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "InfiniteCylinder: [1] Creates an infinite cylinder with axis through two points and given radius."
      ]
    },
    {
      "query": "请画一个长方形，并在其中画一条对角线",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Sphere: [1] Creates a sphere with center in the first point through the second point."
      ]
    },
    {
      "query": "一个长方形，并在其中画一条对角线",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Plane: [3] Creates the plane through the given point and line.",
        "Prism: [2] Creates a right prism with the polygon as base and given height."
      ]
    },
    {
      "query": "请画一个正十边形，并标记其对角线",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Line: [0] Creates a line through two points A and B.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Sector: [1] Yields a conic sector between two parameter values between 0 and 2π on the conic section and calculates its area.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses."
      ]
    },
    {
      "query": "一个正十边形，并标记其对角线",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom.",
        "Intersect: [2] Yields an intersection point of two objects by using a numerical, iterative method with initial point.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "请画一个长为<LENGTH>，宽为<LENGTH>的矩形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Plane: [5] Creates the plane through the given points."
      ]
    },
    {
      "query": "一个长为<LENGTH>，宽为<LENGTH>的矩形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Plane: [2] Creates the plane through the given point, parallel to the given plane."
      ]
    },
    {
      "query": "请画一个对角线相等的四边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "一个对角线相等的四边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined."
      ]
    },
    {
      "query": "请画一个梯形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line)."
      ]
    },
    {
      "query": "一个梯形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Pyramid: [2] Creates a centered pyramid defined by the polygon as base and given height."
      ]
    },
    {
      "query": "请画一个等腰梯形<POINTS>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Plane: [5] Creates the plane through the given points.",
        "Sphere: [0] Creates a sphere with center and radius."
      ]
    },
    {
      "query": "一个等腰梯形<POINTS>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Hyperbola: [2] Creates a hyperbola with given focus points passing through a given point."
      ]
    },
    {
      "query": "请画一个梯形<POINTS>，AB=<LENGTH>，BC=<LENGTH>，CD=<LENGTH>，DA=<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length."
      ]
    },
    {
      "query": "一个梯形<POINTS>，AB=<LENGTH>，BC=<LENGTH>，CD=<LENGTH>，DA=<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Circle: [2] Creates a circle with given center through a given point."
      ]
    },
    {
      "query": "请画一个菱形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [0] Creates a cube having as base the given square.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points."
      ]
    },
    {
      "query": "一个菱形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [0] Creates a cube having as base the given square.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points."
      ]
    },
    {
      "query": "请画一个菱形<POINTS>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Plane: [5] Creates the plane through the given points.",
        "Plane: [3] Creates the plane through the given point and line.",
        "Polygon: [1] Creates a regular polygon with n vertices."
      ]
    },
    {
      "query": "一个菱形<POINTS>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length."
      ]
    },
    {
      "query": "请画一个菱形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Plane: [0] Creates the plane containing the given polygon."
      ]
    },
    {
      "query": "一个菱形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Plane: [2] Creates the plane through the given point, parallel to the given plane."
      ]
    },
    {
      "query": "请画一个平行四边形，并标出对角线",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Prism: [2] Creates a right prism with the polygon as base and given height."
      ]
    },
    {
      "query": "一个平行四边形，并标出对角线",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "请画一个两条对角线相等且互相垂直的四边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge."
      ]
    },
    {
      "query": "一个两条对角线相等且互相垂直的四边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Intersect: [0] Yields the intersection points of two objects."
      ]
    },
    {
      "query": "请画一个内角和为<ANGLE>°的四边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Line: [1] Creates a line through the given point parallel to the given line."
      ]
    },
    {
      "query": "一个内角和为<ANGLE>°的四边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ]
    },
    {
      "query": "请画一个凹多边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge."
      ]
    },
    {
      "query": "一个凹多边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle."
      ]
    },
    {
      "query": "请画一个凸多边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "InfiniteCylinder: [1] Creates an infinite cylinder with axis through two points and given radius."
      ]
    },
    {
      "query": "一个凸多边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ]
    },
    {
      "query": "请画一个对称轴为两条对角线的四边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Line: [0] Creates a line through two points A and B.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge."
      ]
    },
    {
      "query": "一个对称轴为两条对角线的四边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ]
    },
    {
      "query": "请画一个带有对角线的矩形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Prism: [2] Creates a right prism with the polygon as base and given height."
      ]
    },
    {
      "query": "一个带有对角线的矩形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Line: [0] Creates a line through two points A and B.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge."
      ]
    },
    {
      "query": "请画一个包含黄金分割的长方形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "CircumcircularArc: [0] Creates a circular arc through three points, where the first point is the starting point and the third point is the endpoint of the circumcircular arc."
      ]
    },
    {
      "query": "一个包含黄金分割的长方形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ]
    },
    {
      "query": "请画一个轴对称但非中心对称的五边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge."
      ]
    },
    {
      "query": "一个轴对称但非中心对称的五边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "请画一个圆",
      "positives": [
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined.",
        "Cone: [0] Creates a cone with given base and height.",
        "Plane: [6] Creates the plane through the given point and having as normal vector the cross product of the given vectors (that must not be collinear)."
      ]
    },
    {
      "query": "一个圆",
      "positives": [
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Line: [0] Creates a line through two points A and B."
      ]
    },
    {
      "query": "请画一个包含三个不同半径的圆",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "InfiniteCylinder: [1] Creates an infinite cylinder with given radius and with axis of symmetry through a given point parallel to the vector.",
        "Sphere: [1] Creates a sphere with center in the first point through the second point."
      ]
    },
    {
      "query": "一个包含三个不同半径的圆",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "CircumcircularArc: [0] Creates a circular arc through three points, where the first point is the starting point and the third point is the endpoint of the circumcircular arc.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ]
    },
    {
      "query": "请画一个圆，半径为<RADIUS>",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Plane: [1] Creates the plane containing the conic.",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given radius and given line as an axis of symmetry."
      ]
    },
    {
      "query": "一个圆，半径为<RADIUS>",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View."
      ]
    },
    {
      "query": "请画一个圆，圆心为(<X_COORD>,<Y_COORD>)，半径为<RADIUS>",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ]
    },
    {
      "query": "一个圆，圆心为(<X_COORD>,<Y_COORD>)，半径为<RADIUS>",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "请画一个半径为<RADIUS>的圆",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval."
      ]
    },
    {
      "query": "一个半径为<RADIUS>的圆",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Sector: [1] Yields a conic sector between two parameter values between 0 and 2π on the conic section and calculates its area.",
        "Sphere: [0] Creates a sphere with center and radius."
      ]
    },
    {
      "query": "请画一个圆心为(<X_COORD>,<Y_COORD>)并过点(<X_COORD>,<Y_COORD>)的圆",
      "positives": [
        "Circle: [2] Creates a circle with given center through a given point."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters."
      ]
    },
    {
      "query": "一个圆心为(<X_COORD>,<Y_COORD>)并过点(<X_COORD>,<Y_COORD>)的圆",
      "positives": [
        "Circle: [2] Creates a circle with given center through a given point."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cone: [0] Creates a cone with given base and height."
      ]
    },
    {
      "query": "请在坐标平面上画一个以原点为中心、半径为<RADIUS>的圆",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Intersect: [2] Yields an intersection point of two objects by using a numerical, iterative method with initial point."
      ]
    },
    {
      "query": "请在坐标平面上画一个以原点为中心、半径为<RADIUS>的圆",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Prism: [0] Creates a prism defined by the given points.",
        "Dodecahedron: [0] Creates a dodecahedron having the given regular pentagon as base."
      ]
    },
    {
      "query": "请画一个过三点(<X_COORD>,<Y_COORD>)、(<X_COORD>,<Y_COORD>)、(<X_COORD>,<Y_COORD>)的圆",
      "positives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line)."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Plane: [3] Creates the plane through the given point and line.",
        "Intersect: [2] Yields an intersection point of two objects by using a numerical, iterative method with initial point."
      ]
    },
    {
      "query": "一个过三点(<X_COORD>,<Y_COORD>)、(<X_COORD>,<Y_COORD>)、(<X_COORD>,<Y_COORD>)的圆",
      "positives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line)."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom."
      ]
    },
    {
      "query": "请画一个直径相等但不同位置的两个圆",
      "positives": [
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given radius and with line through two points as an axis of symmetry.",
        "Polygon: [1] Creates a regular polygon with n vertices."
      ]
    },
    {
      "query": "一个直径相等但不同位置的两个圆",
      "positives": [
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Plane: [4] Creates the plane through the lines (that must be intersecting or parallel to each other).",
        "Pyramid: [0] Creates a pyramid defined by the given points."
      ]
    },
    {
      "query": "请画一个由四个圆组成的图形",
      "positives": [
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Sphere: [0] Creates a sphere with center and radius.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses."
      ]
    },
    {
      "query": "一个由四个圆组成的图形",
      "positives": [
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined.",
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length."
      ]
    },
    {
      "query": "请画一个外接于圆的正多边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Plane: [1] Creates the plane containing the conic.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined."
      ]
    },
    {
      "query": "一个外接于圆的正多边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Intersect: [1] Yields the nth intersection point of two objects. Each object must be a line, conic, polynomial function or implicit curve.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Line: [0] Creates a line through two points A and B.",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle."
      ]
    },
    {
      "query": "请画一个内接于圆的七边形<POINTS>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length.",
        "Vector: [1] Creates a vector from Start Point to End Point.",
        "Plane: [1] Creates the plane containing the conic.",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment."
      ]
    },
    {
      "query": "一个内接于圆的七边形<POINTS>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given line as axis and radius.",
        "Intersect: [1] Yields the nth intersection point of two objects. Each object must be a line, conic, polynomial function or implicit curve.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "请画一个圆内的正方形，并标出接触点",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Intersect: [0] Yields the intersection points of two objects."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "Sector: [1] Yields a conic sector between two parameter values between 0 and 2π on the conic section and calculates its area.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Pyramid: [0] Creates a pyramid defined by the given points."
      ]
    },
    {
      "query": "一个圆内的正方形，并标出接触点",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Intersect: [0] Yields the intersection points of two objects."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment.",
        "Sphere: [0] Creates a sphere with center and radius.",
        "Plane: [3] Creates the plane through the given point and line."
      ]
    },
    {
      "query": "请画一个圆外的正六边形，并标出接触点",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Intersect: [0] Yields the intersection points of two objects."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Plane: [6] Creates the plane through the given point and having as normal vector the cross product of the given vectors (that must not be collinear).",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Sphere: [0] Creates a sphere with center and radius.",
        "Pyramid: [1] Creates a pyramid with the given polygon as base and the point as apex.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Segment: [1] Creates a segment with the given starting point and length, as well as the end point of the segment."
      ]
    },
    {
      "query": "一个圆外的正六边形，并标出接触点",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Intersect: [0] Yields the intersection points of two objects."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Plane: [6] Creates the plane through the given point and having as normal vector the cross product of the given vectors (that must not be collinear).",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Prism: [2] Creates a right prism with the polygon as base and given height.",
        "Plane: [0] Creates the plane containing the given polygon."
      ]
    },
    {
      "query": "请画一个圆外的正六边形<POINTS>，并标出接触点",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Intersect: [0] Yields the intersection points of two objects."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "Plane: [6] Creates the plane through the given point and having as normal vector the cross product of the given vectors (that must not be collinear).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "一个圆外的正六边形<POINTS>，并标出接触点",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Intersect: [0] Yields the intersection points of two objects."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "CircularSector: [0] Creates a circular sector with midpoint between the two points.",
        "Pyramid: [2] Creates a centered pyramid defined by the polygon as base and given height.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given line as axis and radius."
      ]
    },
    {
      "query": "请画一个圆外的正六边形，并连接其顶点",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Segment: [0] Creates a segment between two points.",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Intersect: [0] Yields the intersection points of two objects."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Hyperbola: [2] Creates a hyperbola with given focus points passing through a given point."
      ]
    },
    {
      "query": "一个圆外的正六边形，并连接其顶点",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Segment: [0] Creates a segment between two points.",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Intersect: [0] Yields the intersection points of two objects."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment.",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [0] Creates a cube having as base the given square."
      ]
    },
    {
      "query": "请画出直线 <VECTOR>=<COEF><VECTOR>+<CONST>，并标出与<VECTOR>轴和<VECTOR>轴的交点",
      "positives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Line: [2] Creates a line through the given point with direction vector v."
      ],
      "negatives": [
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Vector: [1] Creates a vector from Start Point to End Point.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Plane: [5] Creates the plane through the given points.",
        "Pyramid: [2] Creates a centered pyramid defined by the polygon as base and given height."
      ]
    },
    {
      "query": "直线 <VECTOR>=<COEF><VECTOR>+<CONST>，并标出与<VECTOR>轴和<VECTOR>轴的交点",
      "positives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Line: [2] Creates a line through the given point with direction vector v."
      ],
      "negatives": [
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Vector: [1] Creates a vector from Start Point to End Point.",
        "Pyramid: [1] Creates a pyramid with the given polygon as base and the point as apex.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom."
      ]
    },
    {
      "query": "请画出一个经过点(<X_COORD>,<Y_COORD>)且与<VECTOR>轴平行的直线",
      "positives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Line: [2] Creates a line through the given point with direction vector v."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Plane: [3] Creates the plane through the given point and line.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "Vector: [1] Creates a vector from Start Point to End Point.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Plane: [6] Creates the plane through the given point and having as normal vector the cross product of the given vectors (that must not be collinear).",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment."
      ]
    },
    {
      "query": "一个经过点(<X_COORD>,<Y_COORD>)且与<VECTOR>轴平行的直线",
      "positives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Line: [2] Creates a line through the given point with direction vector v."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Plane: [4] Creates the plane through the lines (that must be intersecting or parallel to each other).",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [0] Creates a cone with given base and height.",
        "Plane: [0] Creates the plane containing the given polygon."
      ]
    },
    {
      "query": "请画一个过点(<X_COORD>,<Y_COORD>)且斜率为<COEF>的直线",
      "positives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Line: [2] Creates a line through the given point with direction vector v."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Plane: [3] Creates the plane through the given point and line.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Vector: [0] Creates the position vector of the given point.",
        "Plane: [1] Creates the plane containing the conic."
      ]
    },
    {
      "query": "一个过点(<X_COORD>,<Y_COORD>)且斜率为<COEF>的直线",
      "positives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Line: [2] Creates a line through the given point with direction vector v."
      ],
      "negatives": [
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Prism: [0] Creates a prism defined by the given points."
      ]
    },
    {
      "query": "请画三角形<POINTS>的内切圆",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Plane: [3] Creates the plane through the given point and line.",
        "CircumcircularArc: [0] Creates a circular arc through three points, where the first point is the starting point and the third point is the endpoint of the circumcircular arc.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Prism: [0] Creates a prism defined by the given points."
      ]
    },
    {
      "query": "三角形<POINTS>的内切圆",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "CircumcircularArc: [0] Creates a circular arc through three points, where the first point is the starting point and the third point is the endpoint of the circumcircular arc.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Intersect: [1] Yields the nth intersection point of two objects. Each object must be a line, conic, polynomial function or implicit curve.",
        "Sphere: [0] Creates a sphere with center and radius."
      ]
    },
    {
      "query": "请画三角形<POINTS>的内切圆，并标出切点",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Intersect: [0] Yields the intersection points of two objects."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "CircumcircularArc: [0] Creates a circular arc through three points, where the first point is the starting point and the third point is the endpoint of the circumcircular arc.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Plane: [3] Creates the plane through the given point and line.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Vector: [0] Creates the position vector of the given point.",
        "CircumcircularSector: [0] Creates a circular sector whose arc runs through the three points, where the first point is the starting point and the third point is the endpoint of the arc.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius."
      ]
    },
    {
      "query": "三角形<POINTS>的内切圆，并标出切点",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Intersect: [0] Yields the intersection points of two objects."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "CircumcircularArc: [0] Creates a circular arc through three points, where the first point is the starting point and the third point is the endpoint of the circumcircular arc.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "CircumcircularSector: [0] Creates a circular sector whose arc runs through the three points, where the first point is the starting point and the third point is the endpoint of the arc.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Plane: [3] Creates the plane through the given point and line.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Cube: [0] Creates a cube having as base the given square."
      ]
    },
    {
      "query": "请画一个正四面体",
      "positives": [
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α."
      ]
    },
    {
      "query": "一个正四面体",
      "positives": [
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Prism: [2] Creates a right prism with the polygon as base and given height.",
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length.",
        "Segment: [1] Creates a segment with the given starting point and length, as well as the end point of the segment.",
        "Pyramid: [1] Creates a pyramid with the given polygon as base and the point as apex."
      ]
    },
    {
      "query": "请画一个正四面体，底面为正三角形<POINTS>，顶点为<POINT>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Intersect: [0] Yields the intersection points of two objects.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses."
      ]
    },
    {
      "query": "一个正四面体，底面为正三角形<POINTS>，顶点为<POINT>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length.",
        "Intersect: [1] Yields the nth intersection point of two objects. Each object must be a line, conic, polynomial function or implicit curve.",
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length."
      ]
    },
    {
      "query": "请画一个正八面体",
      "positives": [
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "CircularSector: [0] Creates a circular sector with midpoint between the two points.",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment.",
        "Cylinder: [0] Creates a cylinder with given base and given height."
      ]
    },
    {
      "query": "一个正八面体",
      "positives": [
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ],
      "negatives": [
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Dodecahedron: [0] Creates a dodecahedron having the given regular pentagon as base."
      ]
    },
    {
      "query": "请画一个正八面体，底面为边长为<LENGTH>的正三角形<POINTS>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Segment: [0] Creates a segment between two points.",
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length.",
        "Prism: [0] Creates a prism defined by the given points."
      ]
    },
    {
      "query": "一个正八面体，底面为边长为<LENGTH>的正三角形<POINTS>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Intersect: [2] Yields an intersection point of two objects by using a numerical, iterative method with initial point.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined."
      ]
    },
    {
      "query": "请画一个正十二面体",
      "positives": [
        "Dodecahedron: [0] Creates a dodecahedron having the given regular pentagon as base.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Cone: [0] Creates a cone with given base and height.",
        "InfiniteCylinder: [1] Creates an infinite cylinder with axis through two points and given radius.",
        "Cylinder: [0] Creates a cylinder with given base and given height."
      ]
    },
    {
      "query": "一个正十二面体",
      "positives": [
        "Dodecahedron: [0] Creates a dodecahedron having the given regular pentagon as base.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Plane: [6] Creates the plane through the given point and having as normal vector the cross product of the given vectors (that must not be collinear).",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment."
      ]
    },
    {
      "query": "请画一个正十二面体，底面为正五边形<POINTS>，顶点为<POINT>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Dodecahedron: [0] Creates a dodecahedron having the given regular pentagon as base.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Plane: [5] Creates the plane through the given points.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given point on axis, axis of symmetry parallel to the given vector and radius.",
        "Sphere: [1] Creates a sphere with center in the first point through the second point.",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given line as axis and radius."
      ]
    },
    {
      "query": "一个正十二面体，底面为正五边形<POINTS>，顶点为<POINT>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Dodecahedron: [0] Creates a dodecahedron having the given regular pentagon as base.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Sphere: [0] Creates a sphere with center and radius."
      ]
    },
    {
      "query": "请画一个正二十面体",
      "positives": [
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Hyperbola: [2] Creates a hyperbola with given focus points passing through a given point.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point.",
        "Intersect: [2] Yields an intersection point of two objects by using a numerical, iterative method with initial point."
      ]
    },
    {
      "query": "一个正二十面体",
      "positives": [
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cone: [0] Creates a cone with given base and height.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Dodecahedron: [0] Creates a dodecahedron having the given regular pentagon as base."
      ]
    },
    {
      "query": "请画一个正二十面体，底面为正三角形<POINTS>，顶点为<POINT>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment."
      ]
    },
    {
      "query": "一个正二十面体，底面为正三角形<POINTS>，顶点为<POINT>，边长为<LENGTH>",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Dodecahedron: [0] Creates a dodecahedron having the given regular pentagon as base.",
        "Plane: [2] Creates the plane through the given point, parallel to the given plane.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α."
      ]
    },
    {
      "query": "请画一个正四面体的内切球",
      "positives": [
        "Sphere: [0] Creates a sphere with center and radius.",
        "Sphere: [1] Creates a sphere with center in the first point through the second point.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Prism: [0] Creates a prism defined by the given points.",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given point on axis, axis of symmetry parallel to the given vector and radius."
      ]
    },
    {
      "query": "一个正四面体的内切球",
      "positives": [
        "Sphere: [0] Creates a sphere with center and radius.",
        "Sphere: [1] Creates a sphere with center in the first point through the second point.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Tetrahedron: [3] Creates a tetrahedron with the two points of the first face, and the third point automatically created on a circle, so that the tetrahedron can rotate around its first edge."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α."
      ]
    },
    {
      "query": "请画一个正方体",
      "positives": [
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle."
      ]
    },
    {
      "query": "一个正方体",
      "positives": [
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Intersect: [1] Yields the nth intersection point of two objects. Each object must be a line, conic, polynomial function or implicit curve.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Circle: [0] Creates a circle with given center and radius.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "Intersect: [2] Yields an intersection point of two objects by using a numerical, iterative method with initial point."
      ]
    },
    {
      "query": "请画一个正方体，底面为正方形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Cube: [0] Creates a cube having as base the given square.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined."
      ]
    },
    {
      "query": "一个正方体，底面为正方形<POINTS>，边长为<LENGTH>",
      "positives": [
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible).",
        "Cube: [0] Creates a cube having as base the given square.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Intersect: [1] Yields the nth intersection point of two objects. Each object must be a line, conic, polynomial function or implicit curve.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given radius and given line as an axis of symmetry.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge."
      ]
    },
    {
      "query": "请画一个边长为<LENGTH>的正方体",
      "positives": [
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined.",
        "Sphere: [1] Creates a sphere with center in the first point through the second point.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined."
      ]
    },
    {
      "query": "一个边长为<LENGTH>的正方体",
      "positives": [
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Segment: [1] Creates a segment with the given starting point and length, as well as the end point of the segment.",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment.",
        "Prism: [0] Creates a prism defined by the given points."
      ]
    },
    {
      "query": "请画一个圆锥",
      "positives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given point on axis, axis of symmetry parallel to the given vector and radius.",
        "Segment: [0] Creates a segment between two points."
      ]
    },
    {
      "query": "一个圆锥",
      "positives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Line: [0] Creates a line through two points A and B.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "请画一个圆锥，底面为半径为<RADIUS>的圆，高为<LENGTH>",
      "positives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Sector: [1] Yields a conic sector between two parameter values between 0 and 2π on the conic section and calculates its area.",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined."
      ]
    },
    {
      "query": "一个圆锥，底面为半径为<RADIUS>的圆，高为<LENGTH>",
      "positives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "CircumcircularSector: [0] Creates a circular sector whose arc runs through the three points, where the first point is the starting point and the third point is the endpoint of the arc.",
        "Prism: [2] Creates a right prism with the polygon as base and given height."
      ]
    },
    {
      "query": "请画一个圆锥，高为<LENGTH>，底面为半径为<RADIUS>的圆",
      "positives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ]
    },
    {
      "query": "一个圆锥，高为<LENGTH>，底面为半径为<RADIUS>的圆",
      "positives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Line: [1] Creates a line through the given point parallel to the given line."
      ]
    },
    {
      "query": "请画一个圆锥，底面为半径为<RADIUS>的圆，顶点为(<X_COORD>,<Y_COORD>,<Z_COORD>)",
      "positives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given radius and with line through two points as an axis of symmetry.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ]
    },
    {
      "query": "一个圆锥，底面为半径为<RADIUS>的圆，顶点为(<X_COORD>,<Y_COORD>,<Z_COORD>)",
      "positives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Intersect: [2] Yields an intersection point of two objects by using a numerical, iterative method with initial point."
      ]
    },
    {
      "query": "请画一个圆锥，顶点为(<X_COORD>,<Y_COORD>,<Z_COORD>)，底面为半径为<RADIUS>的圆，",
      "positives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Vector: [1] Creates a vector from Start Point to End Point.",
        "Plane: [2] Creates the plane through the given point, parallel to the given plane."
      ]
    },
    {
      "query": "一个圆锥，顶点为(<X_COORD>,<Y_COORD>,<Z_COORD>)，底面为半径为<RADIUS>的圆，",
      "positives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval.",
        "Sector: [1] Yields a conic sector between two parameter values between 0 and 2π on the conic section and calculates its area."
      ]
    },
    {
      "query": "请画一个圆柱",
      "positives": [
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Prism: [0] Creates a prism defined by the given points.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points."
      ]
    },
    {
      "query": "一个圆柱",
      "positives": [
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Segment: [0] Creates a segment between two points.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle."
      ]
    },
    {
      "query": "请画一个圆柱，底面为半径为<RADIUS>的圆，高为<LENGTH>",
      "positives": [
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cone: [0] Creates a cone with given base and height.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Plane: [0] Creates the plane containing the given polygon.",
        "Segment: [0] Creates a segment between two points."
      ]
    },
    {
      "query": "一个圆柱，底面为半径为<RADIUS>的圆，高为<LENGTH>",
      "positives": [
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Cone: [0] Creates a cone with given base and height.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Plane: [0] Creates the plane containing the given polygon.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "请画一个圆柱，底面为半径为<RADIUS>的圆，顶点为(<X_COORD>,<Y_COORD>,<Z_COORD>)",
      "positives": [
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Cube: [0] Creates a cube having as base the given square.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given radius and with line through two points as an axis of symmetry.",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Hyperbola: [2] Creates a hyperbola with given focus points passing through a given point."
      ]
    },
    {
      "query": "一个圆柱，底面为半径为<RADIUS>的圆，顶点为(<X_COORD>,<Y_COORD>,<Z_COORD>)",
      "positives": [
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom.",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Plane: [0] Creates the plane containing the given polygon.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters."
      ]
    },
    {
      "query": "请画一个以<VECTOR>轴对称的双曲线",
      "positives": [
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length.",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment.",
        "Hyperbola: [2] Creates a hyperbola with given focus points passing through a given point."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Segment: [0] Creates a segment between two points.",
        "CircularSector: [0] Creates a circular sector with midpoint between the two points.",
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "一个以<VECTOR>轴对称的双曲线",
      "positives": [
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length.",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment.",
        "Hyperbola: [2] Creates a hyperbola with given focus points passing through a given point."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Line: [0] Creates a line through two points A and B.",
        "CircularSector: [0] Creates a circular sector with midpoint between the two points.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Cube: [0] Creates a cube having as base the given square."
      ]
    },
    {
      "query": "请画一个具有两个焦点的椭圆",
      "positives": [
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length.",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ],
      "negatives": [
        "Segment: [0] Creates a segment between two points.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "CircularSector: [0] Creates a circular sector with midpoint between the two points.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Line: [0] Creates a line through two points A and B.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Polygon: [1] Creates a regular polygon with n vertices."
      ]
    },
    {
      "query": "一个具有两个焦点的椭圆",
      "positives": [
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length.",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ],
      "negatives": [
        "Segment: [0] Creates a segment between two points.",
        "CircularSector: [0] Creates a circular sector with midpoint between the two points.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Vector: [0] Creates the position vector of the given point.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined."
      ]
    },
    {
      "query": "请画一个含有多个对称轴的椭圆",
      "positives": [
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length.",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Polygon: [1] Creates a regular polygon with n vertices."
      ]
    },
    {
      "query": "一个含有多个对称轴的椭圆",
      "positives": [
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length.",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment.",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Dodecahedron: [3] Creates a dodecahedron with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the dodecahedron can rotate around its first edge.",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge."
      ]
    },
    {
      "query": "请画一个顶点在(<X_COORD>,<Y_COORD>)的抛物线",
      "positives": [
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "CircumcircularSector: [0] Creates a circular sector whose arc runs through the three points, where the first point is the starting point and the third point is the endpoint of the arc."
      ]
    },
    {
      "query": "一个顶点在(<X_COORD>,<Y_COORD>)的抛物线",
      "positives": [
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line)."
      ]
    },
    {
      "query": "请画一个以<VECTOR>轴为对称轴的抛物线",
      "positives": [
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Line: [0] Creates a line through two points A and B.",
        "Plane: [0] Creates the plane containing the given polygon."
      ]
    },
    {
      "query": "一个以<VECTOR>轴为对称轴的抛物线",
      "positives": [
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Line: [0] Creates a line through two points A and B.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View."
      ]
    },
    {
      "query": "请画一个平面中的阿基米德螺线",
      "positives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Sphere: [1] Creates a sphere with center in the first point through the second point."
      ]
    },
    {
      "query": "一个平面中的阿基米德螺线",
      "positives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Cylinder: [0] Creates a cylinder with given base and given height."
      ]
    },
    {
      "query": "请画一个轴对称的心形曲线",
      "positives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Dodecahedron: [0] Creates a dodecahedron having the given regular pentagon as base."
      ]
    },
    {
      "query": "一个轴对称的心形曲线",
      "positives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle."
      ]
    },
    {
      "query": "请画一个贝塞尔曲线",
      "positives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Line: [0] Creates a line through two points A and B.",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle."
      ]
    },
    {
      "query": "一个贝塞尔曲线",
      "positives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given line as axis and radius."
      ]
    },
    {
      "query": "请画一个平面内的莱布尼茨螺线",
      "positives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Dodecahedron: [0] Creates a dodecahedron having the given regular pentagon as base."
      ]
    },
    {
      "query": "一个平面内的莱布尼茨螺线",
      "positives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom."
      ]
    },
    {
      "query": "请画一个具有五个对称轴的星形多边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Plane: [5] Creates the plane through the given points.",
        "Vector: [0] Creates the position vector of the given point."
      ]
    },
    {
      "query": "一个具有五个对称轴的星形多边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "CircumcircularArc: [0] Creates a circular arc through three points, where the first point is the starting point and the third point is the endpoint of the circumcircular arc."
      ]
    },
    {
      "query": "请画一个含有双曲渐近线的图形",
      "positives": [
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length.",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment.",
        "Hyperbola: [2] Creates a hyperbola with given focus points passing through a given point."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Line: [0] Creates a line through two points A and B.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Segment: [0] Creates a segment between two points.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "Plane: [6] Creates the plane through the given point and having as normal vector the cross product of the given vectors (that must not be collinear).",
        "Octahedron: [0] Creates an octahedron having as base the given equilateral triangle."
      ]
    },
    {
      "query": "一个含有双曲渐近线的图形",
      "positives": [
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length.",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment.",
        "Hyperbola: [2] Creates a hyperbola with given focus points passing through a given point."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Line: [0] Creates a line through two points A and B.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points.",
        "CircularSector: [0] Creates a circular sector with midpoint between the two points.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment."
      ]
    },
    {
      "query": "请画一个旋转对称的六边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "一个旋转对称的六边形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "InfiniteCylinder: [1] Creates an infinite cylinder with given radius and with axis of symmetry through a given point parallel to the vector."
      ]
    },
    {
      "query": "请画一个圆锥体的展开图",
      "positives": [
        "Segment: [0] Creates a segment between two points.",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Sector: [1] Yields a conic sector between two parameter values between 0 and 2π on the conic section and calculates its area."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Intersect: [2] Yields an intersection point of two objects by using a numerical, iterative method with initial point.",
        "Prism: [1] Creates a prism with the given polygon as base and the point as first top point.",
        "Plane: [2] Creates the plane through the given point, parallel to the given plane.",
        "Vector: [0] Creates the position vector of the given point."
      ]
    },
    {
      "query": "一个圆锥体的展开图",
      "positives": [
        "Segment: [0] Creates a segment between two points.",
        "Circle: [0] Creates a circle with given center and radius.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Sector: [1] Yields a conic sector between two parameter values between 0 and 2π on the conic section and calculates its area."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "CircularSector: [0] Creates a circular sector with midpoint between the two points.",
        "InfiniteCylinder: [1] Creates an infinite cylinder with axis through two points and given radius.",
        "Cylinder: [0] Creates a cylinder with given base and given height.",
        "Vector: [1] Creates a vector from Start Point to End Point."
      ]
    },
    {
      "query": "请画一个长方体的透视图",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ]
    },
    {
      "query": "一个长方体的透视图",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Polygon: [1] Creates a regular polygon with n vertices."
      ]
    },
    {
      "query": "请画一个四棱锥的侧视图",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "InfiniteCylinder: [1] Creates an infinite cylinder with axis through two points and given radius.",
        "Icosahedron: [3] Creates an icosahedron with the two points of the first face, and the third point automatically created on a circle, so that the icosahedron can rotate around its first edge."
      ]
    },
    {
      "query": "一个四棱锥的侧视图",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Polygon: [1] Creates a regular polygon with n vertices.",
        "Tetrahedron: [0] Creates a tetrahedron having as base the given equilateral triangle."
      ]
    },
    {
      "query": "请画一个六棱柱的俯视图",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Circle: [0] Creates a circle with given center and radius."
      ]
    },
    {
      "query": "一个六棱柱的俯视图",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Plane: [2] Creates the plane through the given point, parallel to the given plane."
      ]
    },
    {
      "query": "请画一个圆柱体的轴测图",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters."
      ]
    },
    {
      "query": "一个圆柱体的轴测图",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius."
      ]
    },
    {
      "query": "请画一个球的剖面图",
      "positives": [
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Segment: [0] Creates a segment between two points.",
        "Pyramid: [0] Creates a pyramid defined by the given points."
      ]
    },
    {
      "query": "一个球的剖面图",
      "positives": [
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment.",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge.",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses.",
        "Cube: [2] Creates a cube with three (adjacent) points of the first face. The points have to start a square for the cube to be defined.",
        "Cone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius.",
        "Octahedron: [1] Creates an octahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created octahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View.",
        "Line: [0] Creates a line through two points A and B.",
        "Intersect: [0] Yields the intersection points of two objects.",
        "Intersect: [2] Yields an intersection point of two objects by using a numerical, iterative method with initial point."
      ]
    },
    {
      "query": "请画一个通过点<POINT>和<POINT>的直线",
      "positives": [
        "Line: [0] Creates a line through two points A and B."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "一个通过点<POINT>和<POINT>的直线",
      "positives": [
        "Line: [0] Creates a line through two points A and B."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "InfiniteCylinder: [1] Creates an infinite cylinder with given radius and with axis of symmetry through a given point parallel to the vector."
      ]
    },
    {
      "query": "请画一个与直线<VECTOR>平行且通过点<POINT>的直线",
      "positives": [
        "Line: [1] Creates a line through the given point parallel to the given line."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Line: [0] Creates a line through two points A and B.",
        "Polygon: [1] Creates a regular polygon with n vertices."
      ]
    },
    {
      "query": "一个与直线<VECTOR>平行且通过点<POINT>的直线",
      "positives": [
        "Line: [1] Creates a line through the given point parallel to the given line."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Line: [0] Creates a line through two points A and B.",
        "Hyperbola: [1] Creates a hyperbola with given focus points where the length of the semimajor axis equals the length of the segment."
      ]
    },
    {
      "query": "请画一个以点<POINT>为起点，方向向量为<VECTOR>的直线",
      "positives": [
        "Line: [2] Creates a line through the given point with direction vector v."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Vector: [1] Creates a vector from Start Point to End Point.",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given radius and given line as an axis of symmetry."
      ]
    },
    {
      "query": "一个以点<POINT>为起点，方向向量为<VECTOR>的直线",
      "positives": [
        "Line: [2] Creates a line through the given point with direction vector v."
      ],
      "negatives": [
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Line: [0] Creates a line through two points A and B.",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given point on axis, axis of symmetry parallel to the given vector and radius."
      ]
    },
    {
      "query": "请画一个以点<POINT>为起点，点<POINT>为终点的向量",
      "positives": [
        "Vector: [1] Creates a vector from Start Point to End Point."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ]
    },
    {
      "query": "一个以点<POINT>为起点，点<POINT>为终点的向量",
      "positives": [
        "Vector: [1] Creates a vector from Start Point to End Point."
      ],
      "negatives": [
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given point on axis, axis of symmetry parallel to the given vector and radius."
      ]
    },
    {
      "query": "请画一个以点<POINT>为起点，长度为<POINT>的线段",
      "positives": [
        "Segment: [1] Creates a segment with the given starting point and length, as well as the end point of the segment."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Sphere: [1] Creates a sphere with center in the first point through the second point."
      ]
    },
    {
      "query": "一个以点<POINT>为起点，长度为<POINT>的线段",
      "positives": [
        "Segment: [1] Creates a segment with the given starting point and length, as well as the end point of the segment."
      ],
      "negatives": [
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α."
      ]
    },
    {
      "query": "请画一个以点<POINT>和点<POINT>为端点的半圆",
      "positives": [
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Polygon: [0] Creates a polygon defined by the given points."
      ]
    },
    {
      "query": "一个以点<POINT>和点<POINT>为端点的半圆",
      "positives": [
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given radius and with line through two points as an axis of symmetry."
      ]
    },
    {
      "query": "请画一个焦点为<POINT>和<POINT>，半长轴为<POINT>的椭圆",
      "positives": [
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length."
      ],
      "negatives": [
        "Segment: [0] Creates a segment between two points.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Plane: [6] Creates the plane through the given point and having as normal vector the cross product of the given vectors (that must not be collinear)."
      ]
    },
    {
      "query": "一个焦点为<POINT>和<POINT>，半长轴为<POINT>的椭圆",
      "positives": [
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given point on axis, axis of symmetry parallel to the given vector and radius."
      ]
    },
    {
      "query": "请画一个焦点为<POINT>和<POINT>，经过点<POINT>的椭圆",
      "positives": [
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ],
      "negatives": [
        "Segment: [0] Creates a segment between two points.",
        "Plane: [3] Creates the plane through the given point and line.",
        "Intersect: [0] Yields the intersection points of two objects."
      ]
    },
    {
      "query": "一个焦点为<POINT>和<POINT>，经过点<POINT>的椭圆",
      "positives": [
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ],
      "negatives": [
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Sector: [0] Yields a conic sector between two points on the conic section and calculates its area. Only works for circles and ellipses."
      ]
    },
    {
      "query": "请画一个焦点为<POINT>和<POINT>，半长轴为<POINT>的双曲线",
      "positives": [
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Cylinder: [0] Creates a cylinder with given base and given height."
      ]
    },
    {
      "query": "一个焦点为<POINT>和<POINT>，半长轴为<POINT>的双曲线",
      "positives": [
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length."
      ],
      "negatives": [
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Plane: [5] Creates the plane through the given points."
      ]
    },
    {
      "query": "请画一个焦点为<POINT>，准线为直线<VECTOR>的抛物线",
      "positives": [
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Line: [0] Creates a line through two points A and B.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined."
      ]
    },
    {
      "query": "一个焦点为<POINT>，准线为直线<VECTOR>的抛物线",
      "positives": [
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Cube: [0] Creates a cube having as base the given square."
      ]
    },
    {
      "query": "请画一个以点<POINT>为圆心，半径为<POINT>的圆",
      "positives": [
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Intersect: [3] Yields the intersection points numerically for the two functions in the given interval."
      ]
    },
    {
      "query": "一个以点<POINT>为圆心，半径为<POINT>的圆",
      "positives": [
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given line as axis and radius."
      ]
    },
    {
      "query": "请画一个以点<POINT>为圆心，经过点<POINT>的圆",
      "positives": [
        "Circle: [2] Creates a circle with given center through a given point."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Plane: [6] Creates the plane through the given point and having as normal vector the cross product of the given vectors (that must not be collinear)."
      ]
    },
    {
      "query": "一个以点<POINT>为圆心，经过点<POINT>的圆",
      "positives": [
        "Circle: [2] Creates a circle with given center through a given point."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Intersect: [0] Yields the intersection points of two objects."
      ]
    },
    {
      "query": "请画一个以点<POINT>为圆心，半径为<POINT>，方向为<VECTOR>的圆",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Line: [0] Creates a line through two points A and B."
      ]
    },
    {
      "query": "一个以点<POINT>为圆心，半径为<POINT>，方向为<VECTOR>的圆",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "InfiniteCylinder: [2] Creates an infinite cylinder with given line as axis and radius."
      ]
    },
    {
      "query": "请画一个以点<POINT>、<POINT>、<POINT>为顶点的正三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Icosahedron: [1] Creates an icosahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created icosahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "一个以点<POINT>、<POINT>、<POINT>为顶点的正三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [0] Creates a cube having as base the given square."
      ]
    },
    {
      "query": "请画一个以点<POINT>、<POINT>为顶点，顶点数为<NUM>的正多边形",
      "positives": [
        "Polygon: [1] Creates a regular polygon with n vertices."
      ],
      "negatives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Plane: [6] Creates the plane through the given point and having as normal vector the cross product of the given vectors (that must not be collinear)."
      ]
    },
    {
      "query": "一个以点<POINT>、<POINT>为顶点，顶点数为<NUM>的正多边形",
      "positives": [
        "Polygon: [1] Creates a regular polygon with n vertices."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Polygon: [0] Creates a polygon defined by the given points.",
        "InfiniteCylinder: [0] Creates an infinite cylinder with given point on axis, axis of symmetry parallel to the given vector and radius."
      ]
    },
    {
      "query": "请画一个以点<POINT>、<POINT>为顶点，顶点数为<NUM>，方向为<VECTOR>的正多边形",
      "positives": [
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Prism: [2] Creates a right prism with the polygon as base and given height."
      ]
    },
    {
      "query": "一个以点<POINT>、<POINT>为顶点，顶点数为<NUM>，方向为<VECTOR>的正多边形",
      "positives": [
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Polygon: [1] Creates a regular polygon with n vertices."
      ]
    },
    {
      "query": "请画一个以点<POINT>为顶点，方向为<VECTOR>，角度为<ANGLE_SYMBOL>的无限圆锥",
      "positives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α."
      ],
      "negatives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Prism: [1] Creates a prism with the given polygon as base and the point as first top point."
      ]
    },
    {
      "query": "一个以点<POINT>为顶点，方向为<VECTOR>，角度为<ANGLE_SYMBOL>的无限圆锥",
      "positives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α."
      ],
      "negatives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Cube: [1] Creates a cube having the segment between the two points as an edge. The other vertices are uniquely determined by the given direction, that should be one of: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created cube will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "请画一个以点<POINT>为顶点，直线<VECTOR>为对称轴，角度为<ANGLE_SYMBOL>的无限圆锥",
      "positives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "一个以点<POINT>为顶点，直线<VECTOR>为对称轴，角度为<ANGLE_SYMBOL>的无限圆锥",
      "positives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Pyramid: [2] Creates a centered pyramid defined by the polygon as base and given height."
      ]
    },
    {
      "query": "请画一个以点<POINT>为中心，半径为<POINT>的球体",
      "positives": [
        "Sphere: [0] Creates a sphere with center and radius."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Cone: [0] Creates a cone with given base and height."
      ]
    },
    {
      "query": "一个以点<POINT>为中心，半径为<POINT>的球体",
      "positives": [
        "Sphere: [0] Creates a sphere with center and radius."
      ],
      "negatives": [
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ]
    },
    {
      "query": "请画一个以点<POINT>为中心，经过点<POINT>的球体",
      "positives": [
        "Sphere: [1] Creates a sphere with center in the first point through the second point."
      ],
      "negatives": [
        "Plane: [3] Creates the plane through the given point and line.",
        "Plane: [5] Creates the plane through the given points.",
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α."
      ]
    },
    {
      "query": "一个以点<POINT>为中心，经过点<POINT>的球体",
      "positives": [
        "Sphere: [1] Creates a sphere with center in the first point through the second point."
      ],
      "negatives": [
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Tetrahedron: [2] Creates a tetrahedron with the three points of the first face. The points have to draw an equilateral triangle for the tetrahedron to be defined."
      ]
    },
    {
      "query": "请画一个以点<POINT>为起点，点<POINT>为终点的线段",
      "positives": [
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "InfiniteCylinder: [1] Creates an infinite cylinder with axis through two points and given radius."
      ]
    },
    {
      "query": "一个以点<POINT>为起点，点<POINT>为终点的线段",
      "positives": [
        "Segment: [0] Creates a segment between two points."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Line: [0] Creates a line through two points A and B.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment."
      ]
    },
    {
      "query": "请画一个以点<POINT>为起点，长度为<POINT>的线段",
      "positives": [
        "Segment: [1] Creates a segment with the given starting point and length, as well as the end point of the segment."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Dodecahedron: [2] Creates a dodecahedron with three (adjacent) points of the first face. The points have to start a regular pentagon for the dodecahedron to be defined."
      ]
    },
    {
      "query": "一个以点<POINT>为起点，长度为<POINT>的线段",
      "positives": [
        "Segment: [1] Creates a segment with the given starting point and length, as well as the end point of the segment."
      ],
      "negatives": [
        "Line: [1] Creates a line through the given point parallel to the given line.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α."
      ]
    },
    {
      "query": "请画一个以点<POINT>为起点，点<POINT>为终点的向量",
      "positives": [
        "Vector: [1] Creates a vector from Start Point to End Point."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "一个以点<POINT>为起点，点<POINT>为终点的向量",
      "positives": [
        "Vector: [1] Creates a vector from Start Point to End Point."
      ],
      "negatives": [
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Cylinder: [0] Creates a cylinder with given base and given height."
      ]
    },
    {
      "query": "请画一个以点<POINT>为起点的向量",
      "positives": [
        "Vector: [0] Creates the position vector of the given point."
      ],
      "negatives": [
        "Vector: [1] Creates a vector from Start Point to End Point.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "CircumcircularArc: [0] Creates a circular arc through three points, where the first point is the starting point and the third point is the endpoint of the circumcircular arc."
      ]
    },
    {
      "query": "一个以点<POINT>为起点的向量",
      "positives": [
        "Vector: [0] Creates the position vector of the given point."
      ],
      "negatives": [
        "Vector: [1] Creates a vector from Start Point to End Point.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View."
      ]
    },
    {
      "query": "请画一个以点<POINT>和点<POINT>为端点的半圆",
      "positives": [
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length."
      ]
    },
    {
      "query": "一个以点<POINT>和点<POINT>为端点的半圆",
      "positives": [
        "Semicircle: [0] Creates a semicircle above the segment between the two points and displays its length in Algebra View."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Icosahedron: [2] Creates an icosahedron with the three points of the first face. The points have to draw an equilateral triangle for the icosahedron to be defined."
      ]
    },
    {
      "query": "请画一个以点<POINT>为圆心，半径为<POINT>的圆",
      "positives": [
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [2] Creates a circle with given center through a given point.",
        "Pyramid: [2] Creates a centered pyramid defined by the polygon as base and given height."
      ]
    },
    {
      "query": "一个以点<POINT>为圆心，半径为<POINT>的圆",
      "positives": [
        "Circle: [0] Creates a circle with given center and radius."
      ],
      "negatives": [
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment."
      ]
    },
    {
      "query": "请画一个以点<POINT>为圆心，经过点<POINT>的圆",
      "positives": [
        "Circle: [2] Creates a circle with given center through a given point."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Pyramid: [0] Creates a pyramid defined by the given points."
      ]
    },
    {
      "query": "一个以点<POINT>为圆心，经过点<POINT>的圆",
      "positives": [
        "Circle: [2] Creates a circle with given center through a given point."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Polygon: [0] Creates a polygon defined by the given points."
      ]
    },
    {
      "query": "请画一个以点<POINT>为圆心，半径为<POINT>，方向为<VECTOR>的圆",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Circle: [4] Creates a circle with line as axis and through the point.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters."
      ]
    },
    {
      "query": "一个以点<POINT>为圆心，半径为<POINT>，方向为<VECTOR>的圆",
      "positives": [
        "Circle: [5] Creates a circle with center, radius, and axis parallel to direction, which can be a line, vector or plane."
      ],
      "negatives": [
        "Circle: [2] Creates a circle with given center through a given point.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Cylinder: [1] Creates a cylinder with given radius and with given points as the centers of the top and bottom."
      ]
    },
    {
      "query": "请画一个焦点为<POINT>和<POINT>，半长轴为<POINT>的椭圆",
      "positives": [
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length."
      ],
      "negatives": [
        "Segment: [0] Creates a segment between two points.",
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Plane: [2] Creates the plane through the given point, parallel to the given plane."
      ]
    },
    {
      "query": "一个焦点为<POINT>和<POINT>，半长轴为<POINT>的椭圆",
      "positives": [
        "Ellipse: [0] Creates an ellipse with two focal points and semimajor axis length."
      ],
      "negatives": [
        "Octahedron: [3] Creates an octahedron with the two points of the first face, and the third point automatically created on a circle, so that the octahedron can rotate around its first edge. Octahedron(A, B) is a shortcut for Octahedron(A, B, C) with C = Point(Circle(Midpoint(A, B), Distance(A, B) sqrt(3) / 2, Segment(A, B))).",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Sphere: [1] Creates a sphere with center in the first point through the second point."
      ]
    },
    {
      "query": "请画一个焦点为<POINT>和<POINT>，经过点<POINT>的椭圆",
      "positives": [
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ],
      "negatives": [
        "Segment: [0] Creates a segment between two points.",
        "Plane: [3] Creates the plane through the given point and line.",
        "Plane: [4] Creates the plane through the lines (that must be intersecting or parallel to each other)."
      ]
    },
    {
      "query": "一个焦点为<POINT>和<POINT>，经过点<POINT>的椭圆",
      "positives": [
        "Ellipse: [2] Creates an ellipse with two focal points passing through a given point."
      ],
      "negatives": [
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line).",
        "Icosahedron: [0] Creates an icosahedron having as base the given equilateral triangle."
      ]
    },
    {
      "query": "请画一个焦点为<POINT>和<POINT>，半长轴为<POINT>的双曲线",
      "positives": [
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Cone: [1] Creates a cone with vertex (second point), circle center (first point) and given radius."
      ]
    },
    {
      "query": "一个焦点为<POINT>和<POINT>，半长轴为<POINT>的双曲线",
      "positives": [
        "Hyperbola: [0] Creates a hyperbola with given focus points and semimajor axis length."
      ],
      "negatives": [
        "Curve: [1] Creates a 3D parametric curve using x, y and z expressions with the given parameter variable over the specified interval.",
        "Curve: [0] Creates a 2D parametric curve using x and y expressions with the given parameter variable over the specified interval.",
        "Line: [1] Creates a line through the given point parallel to the given line."
      ]
    },
    {
      "query": "请画一个焦点为<POINT>，准线为直线<POINT>的抛物线",
      "positives": [
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ],
      "negatives": [
        "Line: [0] Creates a line through two points A and B.",
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Circle: [4] Creates a circle with line as axis and through the point."
      ]
    },
    {
      "query": "一个焦点为<POINT>，准线为直线<POINT>的抛物线",
      "positives": [
        "Parabola: [0] Creates a parabola with focal point and the line as directrix."
      ],
      "negatives": [
        "Line: [2] Creates a line through the given point with direction vector v.",
        "Intersect: [4] Finds one intersection point using a numerical, iterative method starting at the given parameters.",
        "Plane: [5] Creates the plane through the given points."
      ]
    },
    {
      "query": "请画一个以点<POINT>、<POINT>、<POINT>为顶点的正三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "Cube: [3] Creates a cube with two (adjacent) points of the first face, and the third point automatically created on a circle, so that the cube can rotate around its first edge."
      ]
    },
    {
      "query": "一个以点<POINT>、<POINT>、<POINT>为顶点的正三角形",
      "positives": [
        "Polygon: [0] Creates a polygon defined by the given points."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Octahedron: [2] Creates an octahedron with the three points of the first face. The points have to draw an equilateral triangle for the octahedron to be defined.",
        "CircularArc: [0] Creates a circular arc with midpoint between the two points."
      ]
    },
    {
      "query": "请画一个以点<POINT>、<POINT>为顶点，顶点数为<NUM>的正多边形",
      "positives": [
        "Polygon: [1] Creates a regular polygon with n vertices."
      ],
      "negatives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Tetrahedron: [1] Creates a tetrahedron having the segment between the two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created tetrahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane."
      ]
    },
    {
      "query": "一个以点<POINT>、<POINT>为顶点，顶点数为<NUM>的正多边形",
      "positives": [
        "Polygon: [1] Creates a regular polygon with n vertices."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Prism: [2] Creates a right prism with the polygon as base and given height."
      ]
    },
    {
      "query": "请画一个以点<POINT>、<POINT>为顶点，顶点数为<NUM>，方向为<VECTOR>的正多边形",
      "positives": [
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Polygon: [0] Creates a polygon defined by the given points.",
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Ellipse: [1] Creates an ellipse with two focal points, where the length of the semimajor axis equals the length of the given segment."
      ]
    },
    {
      "query": "一个以点<POINT>、<POINT>为顶点，顶点数为<NUM>，方向为<VECTOR>的正多边形",
      "positives": [
        "Polygon: [2] Creates a regular polygon with n vertices, and directed by the direction (e.g. a plane to which the polygon will be parallel, if possible)."
      ],
      "negatives": [
        "Incircle: [0] Creates the incircle of the triangle formed by the three points. The incircle is the circle that is tangent to all three sides of the triangle.",
        "Dodecahedron: [1] Creates a dodecahedron having the segment between two points as an edge. The other vertices are univocally determined by the given direction, that needs to be: a vector, a segment, a line, a ray orthogonal to the segment, or a polygon, a plane parallel to the segment. The created dodecahedron will have: a face with the segment as an edge in a plane orthogonal to the given vector/segment/line/ray, or a face with the segment as an edge in a plane parallel to the polygon/plane.",
        "Intersect: [0] Yields the intersection points of two objects."
      ]
    },
    {
      "query": "请画一个以点<POINT>为顶点，方向为<VECTOR>，角度为<ANGLE_SYMBOL>的无限圆锥",
      "positives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α."
      ],
      "negatives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Cylinder: [0] Creates a cylinder with given base and given height."
      ]
    },
    {
      "query": "一个以点<POINT>为顶点，方向为<VECTOR>，角度为<ANGLE_SYMBOL>的无限圆锥",
      "positives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α."
      ],
      "negatives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Circle: [1] Creates a circle with given center and radius equal to the length of the given segment."
      ]
    },
    {
      "query": "请画一个以点<POINT>为顶点，直线<VECTOR>为对称轴，角度为<ANGLE_SYMBOL>的无限圆锥",
      "positives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Prism: [2] Creates a right prism with the polygon as base and given height."
      ]
    },
    {
      "query": "一个以点<POINT>为顶点，直线<VECTOR>为对称轴，角度为<ANGLE_SYMBOL>的无限圆锥",
      "positives": [
        "InfiniteCone: [2] Creates an infinite cone with given point as vertex, axis of symmetry parallel to given line and apex angle 2α."
      ],
      "negatives": [
        "InfiniteCone: [0] Creates an infinite cone with given point as vertex, axis of symmetry parallel to the given vector and apex angle 2α.",
        "InfiniteCone: [1] Creates an infinite cone with given first point as vertex, line through two points as axis of symmetry and apex angle 2α.",
        "Circle: [3] Creates a circle through the three given points (if they do not lie on the same line)."
      ]
    }
  ]
}